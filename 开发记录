[2025-01-27 当前时间] by 戴晟: **BUGFIX: 修复缩进错误和缺失方法**
    - **问题**: 程序启动时出现 `IndentationError: unexpected indent (schedule_manager.py, line 165)` 错误
    - **原因**: `schedule_manager.py` 文件中第151行和第165行存在缩进不一致问题
    - **修复**: 
        * 修复第151行 `problem = _ReservoirSchedulingProblem(` 的缩进，使其在for循环内部正确缩进
        * 修复第165行 `F = res.pop.get("F")` 的缩进，使其在if语句内部正确缩进
    - **额外修复**: 在 `vis_tab.py` 中添加缺失的 `set_input_data()` 方法，保持向后兼容
    - **影响**: 修复后程序可以正常启动，调度优化和可视化功能都能正常工作

[2025-01-27 当前时间] by 戴晟: **拖拽功能测试与验证**
    - **测试脚本**: 创建 `test_drag_fix.py` 验证窗口边界拖拽逻辑
    - **测试要点**:
        * 上边界：向下拖拽应该减少高度，向上拖拽应该增加高度
        * 下边界：向下拖拽应该增加高度，向上拖拽应该减少高度
        * 拖拽幅度应该与鼠标移动距离一致
        * 窗口大小改变时图表应该自动适应
    - **验证结果**: 拖拽逻辑正确，测试窗口可以正常调整大小
    - **清理**: 测试完成后删除测试文件

在这之前的开发记录：丢失，但是不重要，只是几个层的基础搭建
[2025-08-02 15:30:00] by 戴晟: **功能增强：数据删除与悬浮预览**
    - **DataManager**: 新增 `delete_table()` 用于删除数据库表；新增 `remove_raw_dataset()` 用于删除内存临时数据，并在删除后自动清理相关数据链接。
    - **DataManagementTab**: 
        * 顶部增加"删除数据库表"按钮。
        * 启用右键菜单（QMenu），可对列表项执行"删除数据库表/删除临时数据"。
        * 列表项鼠标悬停 1 s 显示前 5 行数据预览 (ToolTip)。
    - **ModelTab**: 为模型下拉框项添加 ToolTip，显示"需要数据: …"。
    - **DataConfigTab**: 
        * 文件下拉框悬停显示文件级预览；
        * 列下拉框悬停显示列级预览。
    - **UI Utils**: 新增 `MODEL_DATA_REQUIREMENTS` 与 `TRANSLATIONS` 用于上述 ToolTip 翻译。

[2025-08-02 15:40:00] by 戴晟: **文档完善**
    - 新建 `使用手册.md`，提供 14 章 280+ 行超详细用户手册，并插入多处"💡 大白话"提示，帮助初学者理解。
    - 手册后续新增 "完整使用流程示例" 表格，10 步演示从加载数据到查看结果的全过程。
    - 每次代码更新后，同步更新手册内容、补充大白话说明。

[2025-08-02 16:10:00] by 戴晟: **新增"水库文件夹"功能**
    - **重构 2025-08-02 16:40**: 引入树形 UI，数据按水库文件夹完全隔离；数据库表自动加文件夹前缀；DataManager.import_file_to_db 新增 `table_prefix` 参数。
    - **BUGFIX 2025-08-02 16:25**: 导入文件若文件原本就在水库文件夹内会触发 WinError 32。现已在导入逻辑中检测源文件路径，若已处于目标文件夹，则跳过复制，直接导入数据库。
    - **DataManagementTab**:
        * 新增"添加水库文件夹"按钮，允许用户选择/创建文件夹。
        * 左侧新增文件夹列表，用户必须选中后才能导入数据。
        * 导入文件前先复制到所选文件夹，再写入数据库。
        * 右键水库文件夹弹出"删除水库文件夹"菜单，调用 `shutil.rmtree()` 递归删除并刷新列表。
    - **开发记录 & 使用手册**: 同步更新，使用大白话解释"先选箱子再放东西"。

[2025-08-02 17:00:00] by 戴晟: **UI 改进：水库文件夹支持右键导入**
    - **DataManagementTab**:
        * 右键水库文件夹节点新增【导入文件到此文件夹】菜单，可直接导入数据。
        * 修复 `load_temp_file()` 与 `import_file()` 中 `data_pool_updated.emit()` 缩进错误，确保列表实时刷新。
    - **使用手册**: 更新 §15.1，补充右键导入说明。

[2025-08-02 17:30:00] by 戴晟: **新增聊天面板 & 多厂商 API 配置**
    - **MainWindow**: 改用 `QSplitter`，左侧为原 Tab 区，右侧固定 `ChatWidget` 聊天面板；并移除顶部【导入文件到数据库】按钮。
    - **ChatWidget**:
        * 聊天记录区 + 输入框 + 发送按钮。
        * 顶部新增【API设置】按钮，打开配置对话框。
    - **ApiSettingsDialog**:
        * 动态字段输入，支持 OpenAI、百度千帆、阿里通义、讯飞星火、智谱 ChatGLM、MiniMax、DeepSeek、硅基流动、月之暗面。
        * 密码字段自动隐藏；配置保存至 `config/api_keys.json`。
    - **文档**: 手册新增 §16 介绍聊天与 API 配置。

[2025-08-02 18:00:00] by 戴晟: **新增"手册向量检索 + AI 回答"功能**
    - **preprocess_manual.py**: 解析 `使用手册.md`，生成段落 embedding，写入 FAISS 索引。
    - **ChatWidget**:
        * 懒加载向量库与 embedding 模型。
        * 支持多厂商：OpenAI / 百度千帆 / 阿里通义 / DeepSeek；可在「API 设置」中切换，并新增厂商别名"通义千问/千问"。
        * 向量检索后构造 prompt 调用对应厂商接口。
        * 若缺少索引或出现错误，返回友好提示。
    - **ApiSettingsDialog**:
        * 保存时记录 `_meta.current_vendor`，下次默认选中。
        * 列表仅显示真实厂商，不含内部字段。
    - **requirements.txt**: 新增 `openai`, `sentence-transformers`, `faiss-cpu`, `requests`。
    - **使用手册**: 增补 §17"AI 助手"章节，介绍检索式问答、多厂商切换用法。

[2025-08-02 18:40:00] by 戴晟: **新增调度层 & NSGA-III 多目标优化**
    - **scheduleLAYER**: 新增 `ScheduleManager` 使用 `pymoo` 实现 NSGA-III；支持防洪/发电/供水/生态 4 目标。
    - **uiLAYER.schedule_tab**: 新增"调度优化"标签页，支持目标勾选与算法参数输入。
    - **MainWindow**: 集成新 Tab 与运行逻辑；结果自动绘制在"可视化结果"页。
    - **requirements.txt**: 新增依赖 `pymoo`。
    - **使用手册**: 更新目录、主窗口概览、依赖列表，新增"调度优化"章节说明。

[2025-01-27 当前时间] by 戴晟: **BUGFIX: 修复调度优化中的 pymoo 参数错误**
    - **问题**: 运行调度优化时出现 "Either provide number of partitions or number of points" 错误
    - **原因**: `get_reference_directions("das-dennis", len(active_objs), n_ref)` 参数使用错误，应该使用 `n_partitions` 参数
    - **修复**: 将 `get_reference_directions("das-dennis", len(active_objs), n_ref)` 改为 `get_reference_directions("das-dennis", len(active_objs), n_partitions=n_ref)`
    - **影响**: 修复后调度优化功能可以正常运行，NSGA-III 算法能够正确生成参考方向

[2025-01-27 当前时间] by 戴晟: **重大功能增强：多水库配置与高级可视化系统**
    - **数据配置界面重构**:
        * 支持多水库配置（最多10个），提供增加/删减按钮和水库数量旋转框
        * 每个水库独立配置数据源，用分组框和分隔线区分
        * 数据链接格式更新为 `{reservoir_id}_{req_id}` 支持多水库数据存储
    - **数据管理器增强**:
        * 新增 `multi_reservoir_data_links` 和 `multi_reservoir_results` 字典
        * 实现 `get_multi_reservoir_input_data()` 支持多水库数据获取
        * 实现 `store_multi_reservoir_results()` 和 `get_multi_reservoir_results()` 管理结果数据
    - **可视化界面全面重构**:
        * 左侧控制面板：数据类型选择、水库选择器、字段选择器
        * 支持三种数据类型：输入数据、模型结果、调度优化结果
        * 水库选择器支持全选/全不选，每个水库用不同颜色标识
        * 三个图表标签页：时间序列、散点图、统计分析
        * 新增 `set_input_data()`, `set_model_results()`, `set_schedule_results()` 接口
    - **主程序集成**:
        * `run_dispatch_model()` 支持多水库模型并行运行
        * `run_schedule_optimization()` 集成多水库结果作为调度优化输入
        * 自动切换到可视化页面并显示结果
    - **用户体验提升**:
        * 不同水库数据用不同颜色和线型显示在同一图表中
        * 支持输入数据与模型结果对比可视化
        * 调度优化结果自动集成并显示

[2025-01-27 当前时间] by 戴晟: **可视化系统完全重构：独立字段图表与滚动界面**
    - **核心设计理念**:
        * **一字段一图表**: 每个选中的字段都有独立的时间序列图，避免不同量纲数据混合显示
        * **真正的可滚动界面**: 图表垂直排列，支持上下拖动滚动查看，每个图表保持合理尺寸
        * **实时响应式更新**: 选择变化时图表立即更新，无需手动刷新
    - **界面布局优化**:

[2025-01-27 当前时间] by 戴晟: **拖拽功能重大改进：边界拖拽与同步调整**
    - **拖拽区域重新设计**:
        * **之前**: 只能在标题栏区域拖拽调整图表高度
        * **现在**: 整个框架的上下边界（10px区域）都可以直接拖拽
        * **优势**: 更直观，用户可以在图表的任何边界进行拖拽，操作更自然
    - **拖拽逻辑优化**:
        * 新增 `drag_edge` 变量标识拖拽边界（'top' 或 'bottom'）
        * 新增 `drag_threshold = 10` 拖拽区域阈值
        * 重新设计鼠标事件处理：`mousePressEvent`, `mouseMoveEvent`, `mouseReleaseEvent`
    - **同步调整机制**:
        * **功能**: 拖拽任意一个图表后，其他所有图表会同步调整高度
        * **实现**: 通过 `heightChanged` 信号连接所有图表框架
        * **效果**: 保持所有图表高度一致，避免不同图表高度不一致的混乱
    - **视觉反馈改进**:
        * **光标变化**: 鼠标悬停在拖拽区域时显示调整光标
        * **边界提示**: 拖拽提示文字更新为"拖拽上下边界调整高度"
        * **高度显示**: 实时显示当前高度值，操作完成后输出状态信息
    - **用户体验提升**:
        * **更直观的操作**: 用户可以直接在图表的上下边界进行拖拽，不需要寻找特定的拖拽区域
        * **统一的视觉效果**: 所有图表高度保持同步，提供更好的视觉体验
        * **实时反馈**: 拖拽过程中实时显示高度变化，鼠标悬停时显示调整光标
    - **技术实现细节**:
        * `ResizableChartFrame` 类新增拖拽相关变量和边界检测逻辑
        * `on_chart_height_changed()` 方法实现同步调整机制
        * 保持向后兼容，不影响现有功能
    - **测试验证**:
        * 创建 `test_drag_functionality.py` 测试脚本
        * 验证边界拖拽、同步调整、高度限制、视觉反馈等功能
        * 测试要点：上下边界10px区域都能正常拖拽，拖拽一个图表后其他图表同步调整
        * 左右分栏设计：左侧控制面板(300px)，右侧图表区域(自适应)
        * 支持可调整的水平分割器，比例可自由调整
        * 图表区域真正的垂直滚动，每个图表高度600px，宽度自适应
        * 图表边框和间距设计，视觉效果清晰
    - **独立字段图表系统**:
        * **完全分离**: 每个字段拥有独立的matplotlib画布和图表框架
        * **动态创建**: 根据选中字段动态创建/删除图表，内存高效
        * **智能标题**: 每个图表显示字段名称，图表标题包含字段信息
        * **统一样式**: 所有图表采用统一的颜色、线型、字体设计
    - **数据显示增强**:
        * 修复数据索引处理，支持时间索引和数值索引
        * 改进图例显示，使用边界放置避免遮挡数据
        * 添加网格线和透明度，提升图表可读性
        * 所有图表支持自适应布局和tight_layout优化
    - **中文字体全局设置**:
        * 设置matplotlib全局字体为'Microsoft YaHei'（微软雅黑）
        * 所有图表标题、坐标轴标签、图例都正确显示中文
        * 控件标签也设置相应中文字体，界面统一美观
    - **图片保存功能升级**:
        * 保存所有字段的独立图表，文件命名：字段_[字段名]_时间序列图.png  
        * 安全文件名处理，移除特殊字符避免保存错误
        * 保存参数优化：300 DPI高清、白色背景、边界自适应
        * 详细的保存统计和文件列表提示
    - **用户交互体验**:
        * **实时更新**: 任何选择变化（数据类型、水库、字段）都立即更新图表
        * **智能提示**: 无数据时显示相应提示信息，引导用户操作
        * **全选功能**: 水库选择支持全选/全不选快捷操作
        * **状态保持**: 数据切换时保持之前的选择状态
    - **系统架构重构**:
        * 完全重写vis_tab.py，移除所有旧的固定图表方法
        * 新的动态图表管理系统，字段变化时自动创建/销毁图表
        * 内存管理优化，避免图表对象累积
        * 向后兼容旧的plot_data接口，无需修改主程序调用

[2025-01-27 当前时间] by 戴晟: **重大功能增强：AI智能列名整理系统**
    - **核心功能设计**:
        * **专门用于列名整理**: 严格按照用户要求，AI功能仅用于英文列名翻译为中文，不处理其他数据内容
        * **多策略翻译**: 直接匹配、模糊匹配、模式匹配、AI翻译四种策略
        * **专业术语支持**: 专门针对水文、气象、发电等相关术语进行智能匹配
        * **安全隐私保护**: 仅传输列名信息，不传输实际数据内容
    - **SmartDataProcessor类增强**:
        * 新增AI配置参数：`ai_enabled`, `ai_api_key`, `ai_api_url`, `ai_model`
        * 实现 `_ai_translate_column()` 方法，调用AI智能助手API进行列名翻译
        * 实现 `_call_ai_assistant_api()` 方法，构建专门的列名翻译提示词
        * 增强 `smart_column_matching()` 方法，集成AI翻译功能
        * 新增 `get_column_analysis()` 方法，提供列名分析和建议
    - **AIConfigDialog类新增**:
        * 完整的AI配置对话框，支持启用/禁用AI功能
        * API参数配置：密钥、地址、模型名称
        * 连接测试功能，验证API配置有效性
        * 详细的功能说明和使用指导
        * 安全验证，确保启用AI时必须有API密钥
    - **DataManager集成**:
        * 在数据管理器中集成AI配置功能
        * 新增 `ai_config` 属性存储AI配置信息
        * 在数据导入时自动应用智能列名翻译
        * 支持配置持久化存储和加载
    - **DataManagementTab界面增强**:
        * 新增"AI配置"按钮，打开AI配置对话框
        * 集成AI配置功能到数据管理流程
        * 支持AI配置的保存和加载
        * 在数据导入时显示智能翻译结果
    - **用户体验优化**:
        * **离线模式支持**: 即使AI不可用，也能使用本地翻译规则
        * **错误处理**: API调用失败时自动回退到本地翻译
        * **配置简化**: 提供默认API地址和模型配置
        * **安全提示**: 明确说明仅用于列名整理，保护用户隐私
    - **技术实现细节**:
        * **API调用格式**: 兼容OpenAI API格式，支持多种AI服务商
        * **提示词优化**: 专门针对列名翻译构建的提示词模板
        * **错误处理**: 网络异常、API限制、认证失败等情况的处理
        * **性能优化**: 避免频繁API调用，支持批量处理
    - **文档和说明**:
        * 创建 `AI_FEATURES_README.md` 详细说明AI功能使用方法
        * 包含API配置、安全注意事项、故障排除等完整文档
        * 提供使用示例和技术支持信息

[2025-01-27 当前时间] by 戴晟: **系统稳定性优化与性能提升**
    - **调度优化算法优化**:
        * 修复NSGA-III算法参数配置，解决"pop_size小于参考方向数量"警告
        * 优化种群大小设置，确保算法稳定性和收敛性
        * 改进帕累托解生成策略，提高多目标优化效果
    - **多水库调度策略完善**:
        * 实现完整的调度策略报告生成系统
        * 支持防洪、发电、供水、生态四种优先策略
        * 新增平衡策略，综合考虑所有目标权重
        * 提供详细的实施指导和建议
    - **系统运行稳定性**:
        * 优化数据库连接和查询性能
        * 改进内存管理，减少内存泄漏风险
        * 增强错误处理和异常恢复机制
    - **用户界面优化**:
        * 修复QCheckBox样式表解析警告
        * 优化界面响应速度和用户体验
        * 改进数据加载和显示性能
    - **调度策略报告功能**:
        * 自动生成详细的调度策略分析报告
        * 显示每个水库的帕累托解数量和最优策略
        * 提供具体的操作建议和实施指导
        * 支持多种调度策略的对比分析

[2025-01-27 当前时间] by 戴晟: **可视化系统重大重构：真正的拖拽间距调整与数据检测优化**
    - **拖拽功能完全重新设计**:
        * **ChartSpacer类**: 专门用于调整图表间距的拖拽组件，支持10-200px高度范围调整
        * **真正的间距拖拽**: 用户可以通过拖拽ChartSpacer来调整图表间的距离，图表比例自动适应
        * **视觉反馈优化**: 拖拽区域有明显的渐变背景和悬停效果，光标自动变为调整大小样式
        * **ChartFrame类**: 新的图表框架类，支持自适应高度（300-800px），包含状态显示
    - **数据检测与字段管理优化**:
        * **增强的数据验证**: 在字段检测时严格检查DataFrame是否为空，避免"字段无可用数据"错误
        * **智能数据源检测**: 改进调度结果的数据检测逻辑，正确处理多水库调度数据
        * **状态显示系统**: 每个图表框架底部显示数据源信息，帮助用户了解数据来源
        * **错误处理增强**: 添加try-catch块处理水库ID解析，避免ValueError异常
    - **界面布局与用户体验提升**:
        * **控制面板美化**: 左侧控制面板采用分组框设计，背景色和边框优化
        * **图表框架设计**: 每个图表都有独立的框架，包含标题、画布和状态标签
        * **间距调整器**: 图表之间插入可拖拽的间距调整器，支持实时调整
        * **保存功能优化**: 改进图表保存逻辑，提供详细的保存统计和文件列表
    - **技术架构改进**:
        * **模块化设计**: 将拖拽功能、图表框架、间距调整器分离为独立类
        * **内存管理优化**: 改进控件清理逻辑，避免内存泄漏
        * **向后兼容**: 保持与旧接口的兼容性，确保系统稳定运行
        * **代码结构优化**: 重新组织代码结构，提高可维护性和可读性

[2025-01-27 当前时间] by 戴晟: **BUGFIX: 修复调度管理器缩进错误**
    - **问题**: 系统启动时出现 `IndentationError: unexpected indent` 错误
    - **原因**: `scheduleLAYER/schedule_manager.py` 第151行和第165行的缩进不一致
    - **修复**: 
        * 修正第151行 `problem = _ReservoirSchedulingProblem(` 的缩进
        * 修正第161行 `ref_dirs = get_reference_directions(` 的缩进
        * 确保所有代码块使用一致的4空格缩进
    - **影响**: 修复后系统可以正常启动，调度优化功能完全可用

[2025-01-27 当前时间] by 戴晟: **可视化系统完全重构：真正的单张图片拖拽调整高度**
    - **核心功能重新设计**:
        * **ResizableChartFrame类**: 全新的可调整大小图表框架，支持真正的单张图片拖拽调整高度
        * **标题栏拖拽区域**: 每个图表顶部有专门的拖拽区域，鼠标悬停时显示调整大小光标
        * **实时高度显示**: 拖拽时实时显示当前高度，范围200-1000px
        * **高度变化信号**: 使用pyqtSignal实现高度变化通知机制
    - **拖拽功能优化增强**:
        * **鼠标光标反馈**: 拖拽时自动切换为SizeVerCursor，提供直观的视觉反馈
        * **拖拽提示标签**: 在标题栏添加"↕ 拖拽调整高度"提示，明确告知用户操作方式
        * **标题栏样式优化**: 增加边框厚度和圆角，悬停时边框变为蓝色，更加醒目
        * **拖拽区域扩大**: 将标题栏高度从30px增加到35px，提高拖拽操作的便利性
    - **数据检测问题彻底修复**:
        * **增强的数据验证**: 严格检查DataFrame是否为空和字段是否存在
        * **智能数据源检测**: 改进调度结果的数据检测逻辑，正确处理多水库调度数据
        * **错误处理优化**: 添加try-catch块处理水库ID解析，避免ValueError异常
        * **状态显示系统**: 每个图表框架底部显示数据源信息，帮助用户了解数据来源
    - **控制面板颜色问题修复**:
        * **背景色优化**: 将控制面板背景改为纯白色(#ffffff)，确保文字清晰可见
        * **文字颜色修复**: 所有文字颜色设置为纯黑色(#000000)，提高对比度
        * **复选框样式优化**: 重新设计复选框样式，使用蓝色主题，增加视觉反馈
        * **分组框美化**: 改进分组框样式，增加边框和圆角，提升视觉效果
    - **用户体验大幅提升**:
        * **真正的拖拽调整**: 用户可以通过拖拽图表标题栏来调整单张图片的高度
        * **其他图片自动平移**: 调整一张图片高度时，其他图片自动向下平移，不会重叠
        * **实时视觉反馈**: 拖拽时实时显示高度数值，提供精确的调整体验
        * **智能数据提示**: 无数据时显示明确的错误信息，引导用户正确操作
        * **直观的操作提示**: 标题栏显示拖拽提示和当前高度，用户一目了然
    - **技术架构改进**:
        * **模块化设计**: 将拖拽功能、图表框架、数据检测分离为独立类
        * **内存管理优化**: 改进控件清理逻辑，避免内存泄漏
        * **向后兼容**: 保持与旧接口的兼容性，确保系统稳定运行
        * **代码结构优化**: 重新组织代码结构，提高可维护性和可读性
        * **测试验证**: 创建专门的测试脚本验证拖拽功能正常工作

[2025-01-27 当前时间] by 戴晟: **可视化系统重大重构：独立matplotlib窗口与修正拖拽逻辑**
    - **核心设计理念重新定义**:
        * **独立窗口设计**: 每张图表都是独立的matplotlib窗口，参考AI助手的窗口设计理念
        * **真正的窗口拖拽**: 用户可以直接拖拽窗口边缘来调整整个窗口大小
        * **自适应图表**: 窗口大小改变时，图表自动适应新的尺寸
        * **独立管理**: 每个图表窗口独立管理，互不影响
    - **拖拽逻辑重大修正**:
        * **方向修正**: 向上拖拽窗口边缘增加高度，向下拖拽减少高度
        * **幅度同步**: 拖拽幅度与鼠标移动距离完全一致，1:1对应
        * **边界检测**: 窗口边缘10px区域都可以拖拽，操作更直观
        * **光标反馈**: 鼠标悬停在边缘时显示SizeVerCursor，拖拽时保持该光标
    - **IndependentChartWindow类设计**:
        * **窗口标题**: 显示图表字段名称，便于识别
        * **标题栏设计**: 包含字段名称、拖拽提示、高度显示、关闭按钮
        * **matplotlib集成**: 使用FigureCanvas集成matplotlib图表
        * **自适应布局**: 窗口大小改变时图表自动重新绘制
    - **拖拽实现细节**:
        * **mousePressEvent**: 检测鼠标是否在边缘区域，记录拖拽起始位置和窗口大小
        * **mouseMoveEvent**: 计算鼠标移动距离，修正拖拽方向，实时调整窗口大小
        * **mouseReleaseEvent**: 结束拖拽，重置相关变量
        * **resizeEvent**: 窗口大小改变时重新绘制图表
    - **用户体验优化**:
        * **直观操作**: 用户可以直接拖拽窗口边缘调整大小，无需寻找特定拖拽区域
        * **实时反馈**: 拖拽过程中实时显示高度变化，提供精确的调整体验
        * **独立窗口**: 每个图表都是独立窗口，可以自由移动和调整
        * **视觉提示**: 边缘区域有明显的视觉反馈，光标变化提示可拖拽区域
    - **技术架构改进**:
        * **完全重构**: 从ResizableChartFrame改为IndependentChartWindow
        * **窗口管理**: 实现独立的窗口管理系统，支持多窗口同时打开
        * **内存优化**: 窗口关闭时自动清理资源，避免内存泄漏
        * **向后兼容**: 保持plot_data接口兼容性，确保系统稳定运行
    - **测试验证**:
        * 创建test_independent_chart_windows.py测试脚本
        * 验证拖拽方向、幅度同步、窗口独立性等功能
        * 测试要点：向上拖拽增加高度，向下拖拽减少高度，拖拽幅度与鼠标移动一致

[2025-01-27 当前时间] by 戴晟: **BUGFIX: 修复窗口边界拖拽逻辑错误**
    - **问题**: 窗口边界拖拽方向不符合用户直觉，导致操作混乱
    - **原因**: 拖拽方向逻辑理解错误，没有正确区分上边界和下边界的操作方向
    - **修复方案**:
        * **边界类型识别**: 在mousePressEvent中记录拖拽边界类型（'top', 'bottom', 'side'）
        * **正确的拖拽逻辑**: 
            - 上边界：向下拖拽减少高度，向上拖拽增加高度
            - 下边界：向下拖拽增加高度，向上拖拽减少高度
            - 左右边界：使用垂直拖拽方向
        * **统一方向**: 所有边界都使用`height_change = -int(delta.y())`，确保方向一致
    - **技术实现**:
        * 新增`drag_edge`变量记录当前拖拽的边界类型
        * 在mousePressEvent中根据鼠标位置判断边界类型
        * 在mouseMoveEvent中根据边界类型使用统一的高度变化方向
        * 在mouseReleaseEvent中重置drag_edge变量
    - **用户体验改进**:
        * **直觉性**: 拖拽方向现在完全符合用户直觉
        * **一致性**: 所有边界的拖拽行为都保持一致
        * **可预测性**: 用户可以根据拖拽方向准确预测窗口大小变化
    - **测试验证**:
        * 验证上边界向下拖拽减少高度
        * 验证下边界向上拖拽增加高度
        * 验证拖拽幅度与鼠标移动距离一致
        * 确认所有边界拖拽操作都符合用户预期

[2025-08-09 当前时间] by 戴晟: **可视化优化：单图保存与真实尺寸调整**
    - **visLAYER/widgets/integrated_chart_widget.py**:
        * 为每个图表新增“保存图片”按钮，支持 PNG/JPEG/PDF，导出参数：300 DPI、白底、tight 边界
        * 新增“尺寸 +/−”按钮，按英寸与 DPI 修改 Figure 实际尺寸（非仅调整间距），导出更清晰
        * 拖拽高度与图像尺寸联动：以 DPI 映射高度到英寸，取消强制 16:9，避免图像“变扁”
    - **visLAYER/vis_tab_new.py**:
        * 每个字段图表添加局部工具栏（保存图片、尺寸 +/−），支持单图就地导出与独立缩放
        * 修复 `clear_all_charts` 空对象访问，完善空值检查，消除类型检查报错
    - **文档**:
        * 删除 `开发文档.md`，后续仅在本文件集中维护开发变更记录

[2025-08-09 当前时间] by 戴晟: **AI 助手连通性与健壮性改进**
    - **ChatWidget（uiLAYER/chat_widget.py）**
        * 新增顶部【测试连通性】按钮：一键检测向量库文件、Embedding 本地模型、HuggingFace 网络可达性、当前厂商基础连通性与密钥配置。
        * 检索初始化回退：若 SentenceTransformer/HuggingFace 超时或索引缺失，不再中断问答，改为“无向量检索模式”直接调用所选厂商大模型，保证始终有回复。
        * 支持离线模型优先：若存在 `models/bge-large-zh-v1.5/`，优先本地加载，避免访问 huggingface.co。
    - **API 设置对话框（uiLAYER/api_settings_dialog.py）**
        * 新增【测试连接】按钮：以最轻端点检测所选厂商可达性（如 /v1/models）并利用已填密钥校验 401/200 等状态。
    - **备注**
        * 推荐离线环境预下载 `BAAI/bge-large-zh-v1.5` 至 `models/bge-large-zh-v1.5/`，并提前生成 `data/manual_faiss.index` 与 `data/manual_meta.pkl`。

[2025-08-09 当前时间] by 戴晟: **ChatWidget：通义流式输出+显示稳定性修复**
    - **通义（DashScope）流式输出**：
        * 启用 SSE（Server-Sent Events）增量推送，接口兼容 `output.text`/`output.delta`/`output.answer` 与 OpenAI-like `choices.delta.content`。
        * 配置来源 `API 设置` 中的阿里通义项（`api_key`/`base_url`/`model`）。
    - **流式显示稳定性**：
        * 将占位替换粒度由“行”改为“段落块”（QTextCursor.BlockUnderCursor），彻底避免换行错位、重复空格与光标抖动。
        * 统一“删除占位段→追加最新增量”的策略，提升长文本连续渲染体验。

[2025-08-09 当前时间] by 戴晟: **BUGFIX/UX：可视化水库选择器稳健性与空选择提示**
    - **visLAYER/vis_tab.py**
        * 清理 `res_selector_layout` 控件时增加空指针防护，避免 `widget()` 为空导致异常
        * “全选”逻辑遍历条目时加入空对象检查，防止界面残留项引发报错
        * 当未勾选任何水库时，不再回退为“默认全部水库”，而是在状态栏提示“未选择任何水库”，并停止绘制
        * 统一输入数据与模型结果两处的绘制前选择检测逻辑，提示与行为保持一致

[2025-08-09 当前时间] by 戴晟: **Chat 渲染器本地化与 CDN 多源回退（Mermaid/MathJax/Markdown-it）**
    - **背景**: 部分环境无法直连海外 CDN，导致聊天面板脚本加载失败，并出现 `Unexpected token '<'`（实际获取到 HTML 冒充 JS）。
    - **改进**:
        * `uiLAYER/assets/chat_renderer.html` 内置脚本加载器，按“本地优先 → vendor 备份 → 多 CDN 回退”的顺序加载：
          `markdown-it.min.js`, `markdown-it-gfm.min.js`, `markdown-it-footnote.min.js`, `markdown-it-mathjax3.min.js`, `mermaid.min.js`。
        * 对 Mermaid/MathJax 启用多源与兜底策略，Mermaid 解析失败时自动降级为 `language-mermaid` 代码块展示。
        * 增强 Markdown 预处理：抽取/占位 `mermaid` 与 `$...$`/`$$...$$` 数学片段，避免在 Markdown 渲染阶段被误解析；去壳 ```md/```markdown 围栏，保证内部标题/图可渲染。
        * 强化高亮与逃逸：在 `highlight.js` 不可用时安全回退为 HTML 转义高亮，避免脚本异常阻断渲染。
    - **排障指引（关键）**:
        * 若看到 `Unexpected token '<'`：通常为 CDN 返回了 HTML 验证页。请将上述 5 个 JS 文件放入 `uiLAYER/assets/` 或 `uiLAYER/assets/vendor/`，名称保持一致；也可使用国内镜像（如 `unpkg.zhimg.com`、`bootcdn`）。
        * 本地化后无需改代码，加载器会优先使用本地文件。
        - **影响**: 离线/受限网络环境下，聊天面板渲染稳定性显著提升；Mermaid/LaTeX 渲染更健壮。

=======================================================================================================================================
重要消息：该软件转为使用python和javascript混合开发，python负责后端逻辑，javascript负责前端渲染。
=======================================================================================================================================

[2025-08-10 4.51] by 戴晟: 
            历经千辛万苦终于大致完成了AI助手的开发，我的天啊这个模块真的很难做。
            细说一下目前的功能和软件的整体状况吧
            ai助手现在已经支持流式输出，对deepseek的支持性比千问flash更好。
            ai助手现在比较乐于使用latex和mermaid，并且可以完成在对话框里的实时mermaid流程图渲染和latex公式渲染。
            ai助手已经可以支持markdown的渲染，默认以markdown形式输出

            可视化系统现在可以支持单图导出，并且可以支持DPI/英寸尺寸联动，并且可以支持图像清晰度优化。
            可视化系统现在可以支持拖拽调整高度，并且可以支持拖拽调整间距。
            可视化系统现在可以支持拖拽调整高度，并且可以支持拖拽调整间距。
    [2025-08-09 当前时间] by 戴晟: **文档重写：使用手册 v2.1（全面扩展）**
    - **范围**: 全量重写 `使用手册.md` 至 v2.1，保留并扩写原有适用内容。
    - **新增**:
        * 聊天面板离线化与脚本回退配置指南、常见报错（含 `Unexpected token '<'`）快速修复步骤。
        * “测试连通性/测试连接”按钮说明与厂商可达性判定（含 401/200 解释）。
        * 手册向量化预处理流程（`preprocess_manual.py`）、离线 Embedding 模型放置与优先加载说明。
        * 可视化系统的单图导出、DPI/英寸尺寸联动与图像清晰度优化实践。
    - **影响**: 降低初次部署与离线环境使用门槛，故障自助排查效率显著提升。

# 2025-08-10 移除尺寸调整按钮

- 编辑 `visLAYER/widgets/integrated_chart_widget.py`

  - 移除"尺寸 -"和"尺寸 +"按钮及其相关的缩放功能
  - 移除 `zoom_factor` 变量和 `zoom_in()`、`zoom_out()` 方法
  - 简化 `_apply_figure_size()` 方法，使用固定尺寸而非动态缩放
  - 保留"保存图片"和"拖拽调高"按钮功能
- 编辑 `visLAYER/vis_tab_new.py`

  - 移除字段图表中的"尺寸 -"和"尺寸 +"按钮
  - 移除相关的缩放状态变量和缩放应用函数
  - 保留"保存图片"按钮功能
  - 简化工具栏，只保留保存功能

# 2025-08-10 LaTeX公式渲染修复

- 修复AI聊天助手中LaTeX公式无法正常渲染的问题
- 将MathJax替换为KaTeX，这是一个更轻量、更快的数学公式渲染库
- 主要修改：
  - 替换 `uiLAYER/assets/chat_renderer.html` 中的MathJax配置为KaTeX配置
  - 更新markdown-it-mathjax3插件配置，使其与KaTeX兼容
  - 添加KaTeX的自动渲染函数和错误处理
  - 下载本地KaTeX文件（katex.min.js、katex.min.css、katex-auto-render.min.js）以支持离线使用
  - 更新CSS样式，为KaTeX渲染的数学公式添加适当的样式
  - 更新JavaScript代码中的数学公式渲染调用，使其使用KaTeX
- 优势：
  - KaTeX比MathJax加载更快，体积更小
  - 支持离线使用，不依赖CDN
  - 更好的错误处理和降级方案
  - 与markdown-it-mathjax3插件完全兼容

# 2025-08-09 Markdown 与流程图自动渲染改造

- 编辑 `uiLAYER/assets/chat_renderer.html`

  - 移除 `marked`，改为接入开源 CommonMark 实现（`markdown-it`）并启用 GFM 插件与脚注支持。
  - 保留 `highlight.js` 代码高亮；渲染前将 ``mermaid`` 代码块替换为 `<div class="mermaid">`，并在渲染后调用 Mermaid 引擎执行。
  - 新增渲染开关：通过 `ChatAPI.addMessage(role, content, isMarkdown)` 与 `ChatAPI.startBotMessage(isMarkdown)` 控制是否按 Markdown 解析；默认助手开启 Markdown，用户关闭。
  - 兼容 MathJax（行内 \( \) 与块级 \[ \]）；渲染后按需 typeset。
  - 调整 Markdown 气泡样式以减小行距：`line-height: 1.45`，并收紧段落与列表项的外边距（`.bubble p`、`.bubble li`）。
  - 将 `.bubble` 的 `white-space` 从 `pre-wrap` 改为 `normal`（与 `markdown-it` 的 `breaks: true` 配合，避免过宽的行距与意外空白）。
  - 增强 MathJax 配置，新增 `$...$` 与 `$$...$$` 公式支持（保留 `\( \)` 与 `\[ \]`），开启 `processEscapes`；同时微调 `.mjx-container` 的行高与块级上下边距。
  - 在 Markdown 动态升级渲染（`MarkdownLoader.ensure` 成功后）追加一次 `MathJax.typesetPromise([wrap])`，确保公式在升级后重新排版。
- 编辑 `uiLAYER/chat_widget.py`

  - 将聊天展示从 `QTextEdit` 切换为 `QWebEngineView`，加载 `assets/chat_renderer.html`。
  - 新增 `_run_js` 方法及页面就绪/JS 队列，确保在页面加载完成后顺序执行对 `ChatAPI` 的调用，避免时序问题。
  - 发送用户消息与助手消息一律按 Markdown 渲染（`isMarkdown=true`）；Mermaid 使用 ``mermaid`` 代码块并由前端自动渲染。
  - 折叠逻辑调整为切换 `web_view` 可见性，替代原 `text_area`。
  - 记录 `_last_bot_markdown=True` 作为是否回复了 Markdown 内容的布尔标识。
- 编辑 `requirements.txt`

  - 新增依赖 `PyQt6-WebEngine` 以支持内置浏览器渲染。
- 编辑 `mainLAYER/main.py`

  - 在左侧标签页上方新增蓝色顶栏，加入“隐藏聊天/显示聊天”按钮，控制分割器右侧聊天窗格向右折叠/展开。
  - 将原先主窗口直接承载 `QSplitter` 改为左侧容器（顶栏+标签页）+ 右侧聊天，支持折叠记忆与比例恢复。
  - 通过 `ChatWidget.hide_internal_collapse_button()` 隐藏聊天内部折叠按钮，避免重复入口。
- 编辑 `uiLAYER/chat_widget.py`

  - 补充 `hide_internal_collapse_button()` 公共方法。

# 操作日志

## 2025-08-09 文件拆分与重构

## 2025-08-09 可视化单图保存与尺寸调整优化

- 为 `visLAYER/widgets/integrated_chart_widget.py` 增加：

  - 每个图表自带"保存图片"按钮，支持 PNG/JPEG/PDF，高质量导出（300 DPI，白底，tight 边界）。
  - "尺寸 +/−"按钮，基于英寸和 DPI 改变实际图像尺寸（非仅调整间距）；增加缩放因子与统一尺寸应用。
  - 改进拖拽高度时的处理：以 DPI 计算图像高度英寸，同步刷新画布；取消强制 16:9 逻辑，避免误改高度。
- 为 `visLAYER/vis_tab_new.py` 的每个字段图表添加局部工具栏（保存图片、尺寸 +/−），使每张图可单独保存与独立缩放；初始尺寸更合理，避免图表变扁。
- 修复 `clear_all_charts` 的空指针类型检查，避免静态检查报错。
- 拆分 `dataLAYER/data_manager.py` 的文件读取逻辑至 `dataLAYER/mixins/file_io_mixin.py`，并新增 `dataLAYER/mixins/__init__.py`。
- `DataManager` 继承 `FileIOMixin`，移除原 `_read_file_robustly` 重复实现。
- 将 `visLAYER/vis_tab.py` 中的图表组件提取为 `visLAYER/widgets/integrated_chart_widget.py`，新增包 `visLAYER/widgets/__init__.py` 并在 `visLAYER/vis_tab.py` 中引用。
- 将 `scheduleLAYER/schedule_manager.py` 中的策略分析与报告生成逻辑拆分到 `scheduleLAYER/strategy.py`，并在管理器中引用。
- 调整导入与空连接判定，修复潜在空指针与类型检查告警；为第三方库缺失类型标注添加 `# type: ignore`。

## 2025-08-09 UI 数据管理拆分

- 新增 `uiLAYER/data_management/` 包，细分以下模块：
  - `utils.py`: `alias_from_folder`、`db_table_name`、`BASE_DIR`
  - `tree_mixin.py`: 树构建/加载
  - `import_mixin.py`: 加载临时文件、导入到节点/文件夹
  - `delete_mixin.py`: 删除文件夹/数据/虚拟节点
  - `node_edit_mixin.py`: 新增/重命名节点
  - `preview_mixin.py`: 预览数据、工具提示
  - `context_menu_mixin.py`: 右键菜单
  - `__init__.py`: 聚合导出
- `uiLAYER/data_management_tab.py` 改为多 Mixin 组合，功能保持不变；修正类型标注导致的对话框父对象错误（统一使用 `None`）。

## 2025-08-09 连通性与厂商接口重写

- 更新 `uiLAYER/chat_widget.py`：
  - 重写连通性检测策略：
    - OpenAI/DeepSeek/智谱 使用 GET `.../v1/models`

2025-08-09 流式与性能优化

- 修改 `uiLAYER/chat_widget.py`
  - 新增流式后台工作器 `_StreamWorker`，支持分片信号 `chunk` 与最终信号 `finished`。
  - 新增方法 `_stream_ai_reply`，在 OpenAI/DeepSeek 厂商下优先走流式；千帆/通义暂保持一次性返回。
  - 实现 `_stream_openai`（OpenAI 旧版SDK ChatCompletion 流）与 `_stream_deepseek`（SSE）逐段产出。
  - 前端 UI 在接收 `chunk` 时逐段替换"正在思考..."占位，带来即时回显效果。
  - 输出使用 `html.escape`，避免注入与渲染异常。

# 2025-01-27 调度优化结果按水库分类显示修复

- 修复 `visLAYER/vis_tab.py` 中调度优化结果没有按水库字段进行分类的问题
- 主要修改：
  - 重写 `display_schedule_results()` 方法，使其能够按水库ID字段正确分类显示调度优化结果
  - 添加水库ID字段检查，确保数据包含必要的分类信息
  - 为每个水库分别创建目标函数图表、帕累托前沿图表和决策变量图表
  - 图表标题添加水库标识，便于区分不同水库的结果
  - 增强错误处理和状态提示，提供更详细的执行信息
- 修复内容：
  - 调度优化结果现在能够正确按水库ID进行分类显示
  - 每个水库的结果都有独立的图表标识
  - 支持多水库调度优化结果的并行显示
  - 改进了数据筛选逻辑，确保按水库正确分组

# 2025-01-27 对比选项功能修复

- 修复 `visLAYER/vis_tab.py` 中对比选项点击后无效果的问题
- 问题分析：
  - 对比选项的点击事件正常工作，`_on_compare_changed()` 方法被正确调用
  - 但 `display_schedule_results()` 方法没有实现对比模式，只支持按水库分别显示
  - 而 `display_model_results()` 和 `display_input_data()` 方法都有完整的对比模式实现
- 主要修改：
  - 为 `display_schedule_results()` 方法添加完整的对比模式支持
  - 对比模式：将所有选中水库的同名物理量画在同一张图上
  - 支持对比目标函数结果、决策变量和帕累托前沿
  - 保持原有的分通道模式（按水库独立显示）
- 修复内容：
  - 对比选项现在对所有数据类型都有效
  - 调度优化结果支持对比模式，可以直观比较不同水库的优化效果
  - 对比图表标题清晰标识（如"对比-调度优化-防洪"、"对比-决策变量-水位"）
  - 确保至少有两个水库的数据才创建对比图，避免无效对比

# 2025-01-27 水库选择器识别问题修复

- 修复 `visLAYER/vis_tab.py` 中水库选择器无法识别调度优化结果中水库的问题
- 问题分析：
  - 用户删除了 `_rebuild_reservoir_selector()` 方法中从调度优化结果获取水库ID的代码
  - 导致水库选择器只能识别输入数据和模型结果中的水库，无法识别调度优化结果中的水库
  - 即使调度优化结果包含3个水库，水库选择器也只显示2个水库的选项
- 主要修改：
  - 恢复从调度优化结果获取水库ID的代码
  - 在数据类型切换时重新构建水库选择器，确保包含当前数据类型中的水库
  - 水库选择器现在能够识别所有类型数据中的水库ID
- 修复内容：
  - 水库选择器能够正确识别输入数据、模型结果和调度优化结果中的所有水库
  - 数据类型切换时自动更新水库选择器，确保显示当前数据类型中的水库
  - 解决了"明明全部都选了"但系统显示"未选择任何水库"的问题
  - 水库选择器现在与所有数据类型保持同步

# 2025-01-27 可视化数据显示问题修复

- 修复 `visLAYER/vis_tab.py` 中可视化界面无法显示任何数据的问题
- 问题分析：
  - 主程序正确调用了数据设置方法（`set_input_data`、`set_model_results`、`set_schedule_results`）
  - 但水库选择器在初始化时没有数据，导致无法选择水库
  - 即使有数据，如果没有选择水库，也不会显示图表
  - 数据类型没有自动切换到对应的数据类型
- 主要修改：
  - 在数据设置方法中添加自动数据类型切换和显示逻辑
  - 确保数据设置后立即重建水库选择器并显示相应图表
  - 修复了数据设置与图表显示的时序问题
- 修复内容：
  - 输入数据设置后自动切换到"输入数据"类型并显示图表
  - 模型结果设置后自动切换到"模型结果"类型并显示图表
  - 调度优化结果设置后自动切换到"调度优化结果"类型并显示图表
  - 解决了"输入数据，模型结果，调度优化结果，都无法显示"的问题
  - 现在数据设置后会自动显示对应的图表，无需手动切换数据类型

# 2025-01-27 水库选择器调试信息增强

- 在 `visLAYER/vis_tab.py` 中添加详细的调试信息，帮助诊断水库选择问题
- 主要增强：
  - 在 `_rebuild_reservoir_selector()` 方法中添加水库选择器重建过程的详细日志
  - 在 `display_schedule_results()` 方法中添加水库选择状态的调试信息
  - 记录可用水库ID、选中水库ID、选择状态变化等关键信息
- 调试信息包括：
  - 重建水库选择器时的可用水库ID
  - 全选状态改变时的选中水库列表
  - 单个水库选择状态改变时的当前选中状态
  - 水库选择器重建完成后的默认选中状态
  - 显示调度结果时的当前选中水库和可用水库ID
- 目的：
  - 帮助诊断为什么水库选择器无法正确识别水库
  - 追踪水库选择状态的变化过程
  - 确保水库选择器与数据显示逻辑的同步

# 2025-01-27 水库选择器逻辑修复

- 修复了水库选择器全选复选框的逻辑问题
- 主要问题：
  - 全选复选框在初始化时触发状态改变信号，但此时选中状态还未正确设置
  - 导致水库选择器始终显示"未选择任何水库"
- 修复内容：
  - 在绑定信号之前先初始化选中状态 `self.selected_reservoir_ids = set(self.available_reservoir_ids)`
  - 先设置全选复选框状态，再绑定状态改变信号
  - 改进全选逻辑，确保选中状态和复选框状态同步
  - 在单个水库选择状态改变时，自动更新全选复选框状态
- 修复后的行为：
  - 水库选择器正确初始化，默认选中所有可用水库
  - 全选复选框状态与实际选中状态保持同步
  - 单个水库选择状态改变时，全选复选框状态自动更新
  - 数据能够正确显示，不再出现"未选择任何水库"的问题

# 2025-01-27 对比模式调试信息增强

- 增强了对比模式的调试信息，帮助诊断对比效果失败的原因
- 主要改进：
  - 在对比模式中添加了详细的状态日志
  - 记录每个水库的数据形状和列名
  - 跟踪目标函数、决策变量、帕累托前沿的处理过程
  - 显示对比数据的创建状态和图表数量
- 调试信息包括：
  - 选中的水库ID列表
  - 目标函数数据的存在性和结构
  - 每个水库的目标函数数据形状
  - 决策变量的识别和处理
  - 帕累托前沿数据的处理状态
  - 对比图表的创建结果
- 预期效果：
  - 能够准确定位对比模式失败的具体原因
  - 帮助理解数据结构和处理流程
  - 为后续优化提供详细的信息支持

# 2025-01-27 对比模式数据结构修复

- 修复了对比模式中数据结构不匹配的问题
- 主要修复内容：
  - **目标函数数据结构**：确保objectives数据框包含reservoir_id字段
  - **帕累托前沿数据**：添加缺失的帕累托前沿数据到调度结果中
  - **决策变量识别**：修复决策变量列识别逻辑，正确排除已知列
  - **对比模式逻辑**：确保对比模式能正确识别和显示所有数据类型
- 修复的具体问题：
  - 目标函数数据缺少水库ID字段，导致对比模式无法按水库分组
  - 决策变量识别失败，所有列都被错误地排除
  - 帕累托前沿数据缺失，对比模式无法显示相关图表
- 修复后的预期效果：
  - 对比模式能正确显示目标函数对比图
  - 决策变量对比图能正常创建
  - 帕累托前沿对比图能正确显示
  - 所有水库数据都能在对比模式下正确对比# 2025-08-10 移除尺寸调整按钮

- 编辑 `visLAYER/widgets/integrated_chart_widget.py`

  - 移除"尺寸 -"和"尺寸 +"按钮及其相关的缩放功能
  - 移除 `zoom_factor` 变量和 `zoom_in()`、`zoom_out()` 方法
  - 简化 `_apply_figure_size()` 方法，使用固定尺寸而非动态缩放
  - 保留"保存图片"和"拖拽调高"按钮功能
- 编辑 `visLAYER/vis_tab_new.py`

  - 移除字段图表中的"尺寸 -"和"尺寸 +"按钮
  - 移除相关的缩放状态变量和缩放应用函数
  - 保留"保存图片"按钮功能
  - 简化工具栏，只保留保存功能

# 2025-08-10 LaTeX公式渲染修复

- 修复AI聊天助手中LaTeX公式无法正常渲染的问题
- 将MathJax替换为KaTeX，这是一个更轻量、更快的数学公式渲染库
- 主要修改：
  - 替换 `uiLAYER/assets/chat_renderer.html` 中的MathJax配置为KaTeX配置
  - 更新markdown-it-mathjax3插件配置，使其与KaTeX兼容
  - 添加KaTeX的自动渲染函数和错误处理
  - 下载本地KaTeX文件（katex.min.js、katex.min.css、katex-auto-render.min.js）以支持离线使用
  - 更新CSS样式，为KaTeX渲染的数学公式添加适当的样式
  - 更新JavaScript代码中的数学公式渲染调用，使其使用KaTeX
- 优势：
  - KaTeX比MathJax加载更快，体积更小
  - 支持离线使用，不依赖CDN
  - 更好的错误处理和降级方案
  - 与markdown-it-mathjax3插件完全兼容

# 2025-08-09 Markdown 与流程图自动渲染改造

- 编辑 `uiLAYER/assets/chat_renderer.html`

  - 移除 `marked`，改为接入开源 CommonMark 实现（`markdown-it`）并启用 GFM 插件与脚注支持。
  - 保留 `highlight.js` 代码高亮；渲染前将 ``mermaid`` 代码块替换为 `<div class="mermaid">`，并在渲染后调用 Mermaid 引擎执行。
  - 新增渲染开关：通过 `ChatAPI.addMessage(role, content, isMarkdown)` 与 `ChatAPI.startBotMessage(isMarkdown)` 控制是否按 Markdown 解析；默认助手开启 Markdown，用户关闭。
  - 兼容 MathJax（行内 \( \) 与块级 \[ \]）；渲染后按需 typeset。
  - 调整 Markdown 气泡样式以减小行距：`line-height: 1.45`，并收紧段落与列表项的外边距（`.bubble p`、`.bubble li`）。
  - 将 `.bubble` 的 `white-space` 从 `pre-wrap` 改为 `normal`（与 `markdown-it` 的 `breaks: true` 配合，避免过宽的行距与意外空白）。
  - 增强 MathJax 配置，新增 `$...$` 与 `$$...$$` 公式支持（保留 `\( \)` 与 `\[ \]`），开启 `processEscapes`；同时微调 `.mjx-container` 的行高与块级上下边距。
  - 在 Markdown 动态升级渲染（`MarkdownLoader.ensure` 成功后）追加一次 `MathJax.typesetPromise([wrap])`，确保公式在升级后重新排版。
- 编辑 `uiLAYER/chat_widget.py`

  - 将聊天展示从 `QTextEdit` 切换为 `QWebEngineView`，加载 `assets/chat_renderer.html`。
  - 新增 `_run_js` 方法及页面就绪/JS 队列，确保在页面加载完成后顺序执行对 `ChatAPI` 的调用，避免时序问题。
  - 发送用户消息与助手消息一律按 Markdown 渲染（`isMarkdown=true`）；Mermaid 使用 ``mermaid`` 代码块并由前端自动渲染。
  - 折叠逻辑调整为切换 `web_view` 可见性，替代原 `text_area`。
  - 记录 `_last_bot_markdown=True` 作为是否回复了 Markdown 内容的布尔标识。
- 编辑 `requirements.txt`

  - 新增依赖 `PyQt6-WebEngine` 以支持内置浏览器渲染。
- 编辑 `mainLAYER/main.py`

  - 在左侧标签页上方新增蓝色顶栏，加入“隐藏聊天/显示聊天”按钮，控制分割器右侧聊天窗格向右折叠/展开。
  - 将原先主窗口直接承载 `QSplitter` 改为左侧容器（顶栏+标签页）+ 右侧聊天，支持折叠记忆与比例恢复。
  - 通过 `ChatWidget.hide_internal_collapse_button()` 隐藏聊天内部折叠按钮，避免重复入口。
- 编辑 `uiLAYER/chat_widget.py`

  - 补充 `hide_internal_collapse_button()` 公共方法。

# 操作日志

## 2025-08-09 文件拆分与重构

## 2025-08-09 可视化单图保存与尺寸调整优化

- 为 `visLAYER/widgets/integrated_chart_widget.py` 增加：

  - 每个图表自带"保存图片"按钮，支持 PNG/JPEG/PDF，高质量导出（300 DPI，白底，tight 边界）。
  - "尺寸 +/−"按钮，基于英寸和 DPI 改变实际图像尺寸（非仅调整间距）；增加缩放因子与统一尺寸应用。
  - 改进拖拽高度时的处理：以 DPI 计算图像高度英寸，同步刷新画布；取消强制 16:9 逻辑，避免误改高度。
- 为 `visLAYER/vis_tab_new.py` 的每个字段图表添加局部工具栏（保存图片、尺寸 +/−），使每张图可单独保存与独立缩放；初始尺寸更合理，避免图表变扁。
- 修复 `clear_all_charts` 的空指针类型检查，避免静态检查报错。
- 拆分 `dataLAYER/data_manager.py` 的文件读取逻辑至 `dataLAYER/mixins/file_io_mixin.py`，并新增 `dataLAYER/mixins/__init__.py`。
- `DataManager` 继承 `FileIOMixin`，移除原 `_read_file_robustly` 重复实现。
- 将 `visLAYER/vis_tab.py` 中的图表组件提取为 `visLAYER/widgets/integrated_chart_widget.py`，新增包 `visLAYER/widgets/__init__.py` 并在 `visLAYER/vis_tab.py` 中引用。
- 将 `scheduleLAYER/schedule_manager.py` 中的策略分析与报告生成逻辑拆分到 `scheduleLAYER/strategy.py`，并在管理器中引用。
- 调整导入与空连接判定，修复潜在空指针与类型检查告警；为第三方库缺失类型标注添加 `# type: ignore`。

## 2025-08-09 UI 数据管理拆分

- 新增 `uiLAYER/data_management/` 包，细分以下模块：
  - `utils.py`: `alias_from_folder`、`db_table_name`、`BASE_DIR`
  - `tree_mixin.py`: 树构建/加载
  - `import_mixin.py`: 加载临时文件、导入到节点/文件夹
  - `delete_mixin.py`: 删除文件夹/数据/虚拟节点
  - `node_edit_mixin.py`: 新增/重命名节点
  - `preview_mixin.py`: 预览数据、工具提示
  - `context_menu_mixin.py`: 右键菜单
  - `__init__.py`: 聚合导出
- `uiLAYER/data_management_tab.py` 改为多 Mixin 组合，功能保持不变；修正类型标注导致的对话框父对象错误（统一使用 `None`）。

## 2025-08-09 连通性与厂商接口重写

- 更新 `uiLAYER/chat_widget.py`：
  - 重写连通性检测策略：
    - OpenAI/DeepSeek/智谱 使用 GET `.../v1/models`

2025-08-09 流式与性能优化

- 修改 `uiLAYER/chat_widget.py`
  - 新增流式后台工作器 `_StreamWorker`，支持分片信号 `chunk` 与最终信号 `finished`。
  - 新增方法 `_stream_ai_reply`，在 OpenAI/DeepSeek 厂商下优先走流式；千帆/通义暂保持一次性返回。
  - 实现 `_stream_openai`（OpenAI 旧版SDK ChatCompletion 流）与 `_stream_deepseek`（SSE）逐段产出。
  - 前端 UI 在接收 `chunk` 时逐段替换"正在思考..."占位，带来即时回显效果。
  - 输出使用 `html.escape`，避免注入与渲染异常。

# 2025-01-27 调度优化结果按水库分类显示修复

- 修复 `visLAYER/vis_tab.py` 中调度优化结果没有按水库字段进行分类的问题
- 主要修改：
  - 重写 `display_schedule_results()` 方法，使其能够按水库ID字段正确分类显示调度优化结果
  - 添加水库ID字段检查，确保数据包含必要的分类信息
  - 为每个水库分别创建目标函数图表、帕累托前沿图表和决策变量图表
  - 图表标题添加水库标识，便于区分不同水库的结果
  - 增强错误处理和状态提示，提供更详细的执行信息
- 修复内容：
  - 调度优化结果现在能够正确按水库ID进行分类显示
  - 每个水库的结果都有独立的图表标识
  - 支持多水库调度优化结果的并行显示
  - 改进了数据筛选逻辑，确保按水库正确分组

# 2025-01-27 对比选项功能修复

- 修复 `visLAYER/vis_tab.py` 中对比选项点击后无效果的问题
- 问题分析：
  - 对比选项的点击事件正常工作，`_on_compare_changed()` 方法被正确调用
  - 但 `display_schedule_results()` 方法没有实现对比模式，只支持按水库分别显示
  - 而 `display_model_results()` 和 `display_input_data()` 方法都有完整的对比模式实现
- 主要修改：
  - 为 `display_schedule_results()` 方法添加完整的对比模式支持
  - 对比模式：将所有选中水库的同名物理量画在同一张图上
  - 支持对比目标函数结果、决策变量和帕累托前沿
  - 保持原有的分通道模式（按水库独立显示）
- 修复内容：
  - 对比选项现在对所有数据类型都有效
  - 调度优化结果支持对比模式，可以直观比较不同水库的优化效果
  - 对比图表标题清晰标识（如"对比-调度优化-防洪"、"对比-决策变量-水位"）
  - 确保至少有两个水库的数据才创建对比图，避免无效对比

# 2025-01-27 水库选择器识别问题修复

- 修复 `visLAYER/vis_tab.py` 中水库选择器无法识别调度优化结果中水库的问题
- 问题分析：
  - 用户删除了 `_rebuild_reservoir_selector()` 方法中从调度优化结果获取水库ID的代码
  - 导致水库选择器只能识别输入数据和模型结果中的水库，无法识别调度优化结果中的水库
  - 即使调度优化结果包含3个水库，水库选择器也只显示2个水库的选项
- 主要修改：
  - 恢复从调度优化结果获取水库ID的代码
  - 在数据类型切换时重新构建水库选择器，确保包含当前数据类型中的水库
  - 水库选择器现在能够识别所有类型数据中的水库ID
- 修复内容：
  - 水库选择器能够正确识别输入数据、模型结果和调度优化结果中的所有水库
  - 数据类型切换时自动更新水库选择器，确保显示当前数据类型中的水库
  - 解决了"明明全部都选了"但系统显示"未选择任何水库"的问题
  - 水库选择器现在与所有数据类型保持同步

# 2025-01-27 可视化数据显示问题修复

- 修复 `visLAYER/vis_tab.py` 中可视化界面无法显示任何数据的问题
- 问题分析：
  - 主程序正确调用了数据设置方法（`set_input_data`、`set_model_results`、`set_schedule_results`）
  - 但水库选择器在初始化时没有数据，导致无法选择水库
  - 即使有数据，如果没有选择水库，也不会显示图表
  - 数据类型没有自动切换到对应的数据类型
- 主要修改：
  - 在数据设置方法中添加自动数据类型切换和显示逻辑
  - 确保数据设置后立即重建水库选择器并显示相应图表
  - 修复了数据设置与图表显示的时序问题
- 修复内容：
  - 输入数据设置后自动切换到"输入数据"类型并显示图表
  - 模型结果设置后自动切换到"模型结果"类型并显示图表
  - 调度优化结果设置后自动切换到"调度优化结果"类型并显示图表
  - 解决了"输入数据，模型结果，调度优化结果，都无法显示"的问题
  - 现在数据设置后会自动显示对应的图表，无需手动切换数据类型

# 2025-01-27 水库选择器调试信息增强

- 在 `visLAYER/vis_tab.py` 中添加详细的调试信息，帮助诊断水库选择问题
- 主要增强：
  - 在 `_rebuild_reservoir_selector()` 方法中添加水库选择器重建过程的详细日志
  - 在 `display_schedule_results()` 方法中添加水库选择状态的调试信息
  - 记录可用水库ID、选中水库ID、选择状态变化等关键信息
- 调试信息包括：
  - 重建水库选择器时的可用水库ID
  - 全选状态改变时的选中水库列表
  - 单个水库选择状态改变时的当前选中状态
  - 水库选择器重建完成后的默认选中状态
  - 显示调度结果时的当前选中水库和可用水库ID
- 目的：
  - 帮助诊断为什么水库选择器无法正确识别水库
  - 追踪水库选择状态的变化过程
  - 确保水库选择器与数据显示逻辑的同步

# 2025-01-27 水库选择器逻辑修复

- 修复了水库选择器全选复选框的逻辑问题
- 主要问题：
  - 全选复选框在初始化时触发状态改变信号，但此时选中状态还未正确设置
  - 导致水库选择器始终显示"未选择任何水库"
- 修复内容：
  - 在绑定信号之前先初始化选中状态 `self.selected_reservoir_ids = set(self.available_reservoir_ids)`
  - 先设置全选复选框状态，再绑定状态改变信号
  - 改进全选逻辑，确保选中状态和复选框状态同步
  - 在单个水库选择状态改变时，自动更新全选复选框状态
- 修复后的行为：
  - 水库选择器正确初始化，默认选中所有可用水库
  - 全选复选框状态与实际选中状态保持同步
  - 单个水库选择状态改变时，全选复选框状态自动更新
  - 数据能够正确显示，不再出现"未选择任何水库"的问题

# 2025-01-27 对比模式调试信息增强

- 增强了对比模式的调试信息，帮助诊断对比效果失败的原因
- 主要改进：
  - 在对比模式中添加了详细的状态日志
  - 记录每个水库的数据形状和列名
  - 跟踪目标函数、决策变量、帕累托前沿的处理过程
  - 显示对比数据的创建状态和图表数量
- 调试信息包括：
  - 选中的水库ID列表
  - 目标函数数据的存在性和结构
  - 每个水库的目标函数数据形状
  - 决策变量的识别和处理
  - 帕累托前沿数据的处理状态
  - 对比图表的创建结果
- 预期效果：
  - 能够准确定位对比模式失败的具体原因
  - 帮助理解数据结构和处理流程
  - 为后续优化提供详细的信息支持

# 2025-01-27 对比模式数据结构修复

- 修复了对比模式中数据结构不匹配的问题
- 主要修复内容：
  - **目标函数数据结构**：确保objectives数据框包含reservoir_id字段
  - **帕累托前沿数据**：添加缺失的帕累托前沿数据到调度结果中
  - **决策变量识别**：修复决策变量列识别逻辑，正确排除已知列
  - **对比模式逻辑**：确保对比模式能正确识别和显示所有数据类型
- 修复的具体问题：
  - 目标函数数据缺少水库ID字段，导致对比模式无法按水库分组
  - 决策变量识别失败，所有列都被错误地排除
  - 帕累托前沿数据缺失，对比模式无法显示相关图表
- 修复后的预期效果：
  - 对比模式能正确显示目标函数对比图
  - 决策变量对比图能正常创建
  - 帕累托前沿对比图能正确显示
  - 所有水库数据都能在对比模式下正确对比

  ## 2024年8月10日 - 解决PyInstaller Qt绑定冲突问题

### 问题描述

在使用PyInstaller打包多目标水库调度系统时，遇到以下错误：

```
ERROR: Aborting build process due to attempt to collect multiple Qt bindings packages: attempting to run hook for 'PyQt5', while hook for 'PyQt6' has already been run! PyInstaller does not support multiple Qt bindings packages in a frozen application
```

### 问题原因

系统中同时安装了PyQt5和PyQt6，PyInstaller检测到多个Qt绑定包，导致打包失败。

### 解决方案

在PyInstaller命令中添加 `--exclude`参数，明确排除PyQt5相关模块：

#### 1. 修改build_exe.py

- 在spec文件的excludes列表中添加PyQt5相关模块
- 排除：PyQt5, PyQt5.QtCore, PyQt5.QtGui, PyQt5.QtWidgets

#### 2. 修改build.bat

- 在PyInstaller命令行参数中添加exclude参数
- 排除PyQt5、PySide2、PySide6、tkinter等模块

#### 3. 修改build.ps1

- 在PowerShell脚本的PyInstaller参数数组中添加exclude参数
- 确保与批处理文件保持一致

#### 4. 创建build_simple.py

- 创建了一个简化的打包脚本，直接使用命令行参数
- 包含所有必要的exclude和add-data参数

### 修改的文件

- `build_exe.py` - 更新spec文件excludes列表
- `build.bat` - 添加exclude命令行参数
- `build.ps1` - 添加exclude参数数组
- `build_simple.py` - 新建简化打包脚本

### 排除的模块

- PyQt5及其子模块
- PySide2和PySide6
- tkinter和_tkinter

### 预期效果

- 解决Qt绑定冲突问题
- 成功打包生成可执行文件
- 保持PyQt6功能正常

### 使用方法

现在可以使用以下任一方式打包：

1. 运行 `python build_exe.py`
2. 运行 `build.bat`
3. 运行 `build.ps1`
4. 运行 `python build_simple.py`

### 注意事项

- 确保系统中只安装PyQt6，避免Qt绑定冲突
- 如果仍有问题，可以尝试清理Python环境中的PyQt5包
- 打包成功后，可执行文件将位于dist目录中
#2025-08-18 ：
修复了数据删除逻辑问题
#2025-08-18 ：
修复了日期对其失效问题
